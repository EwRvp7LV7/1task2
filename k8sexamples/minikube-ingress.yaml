apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kuard
  annotations:
    # kubernetes.io/ingress.class: "nginx"    
    cert-manager.io/issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - api.nameofdomain
    secretName: quickstart-example-tls
  rules:
  - host: api.nameofdomain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kuard
            port:
              number: 80




# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   # annotations:
#   #   kubernetes.io/ingress.class: nginx
#   name: kuard
#   # namespace: default
# spec:
#   rules:
#   - host: api.nameofdomain
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: kuard
#             port:
#               number: 80
#   tls:
#   - hosts:
#     - api.nameofdomain
#     secretName: quickstart-example-tls




# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: example-ingress
#   # annotations:
#   #   nginx.ingress.kubernetes.io/rewrite-target: /$1 used in regex like path: /something(/|$)(.*)
# spec:
#   rules:
#     - host: tunnel.nameofdomain
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: web
#                 port:
#                   number: 8080
#     - host: api.nameofdomain
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: web2
#                 port:
#                   number: 8080
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: web
#   name: web
# spec:
#   ports:
#   - port: 8080
#     protocol: TCP
#     targetPort: 8080
#   selector:
#     app: web
#   type: NodePort
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     app: web
#   name: web
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: web
#   template:
#     metadata:
#       labels:
#         app: web
#     spec:
#       containers:
#       - image: gcr.io/google-samples/hello-app:1.0
#         name: hello-app
#         resources:
#           limits:
#             cpu: 100m
#             memory: 100Mi
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: web2
#   name: web2
# spec:
#   ports:
#   - port: 8080
#     protocol: TCP
#     targetPort: 8080
#   selector:
#     app: web2
#   type: NodePort
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     app: web2
#   name: web2
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: web2
#   template:
#     metadata:
#       labels:
#         app: web2
#     spec:
#       containers:
#       - image: gcr.io/google-samples/hello-app:2.0
#         name: hello-app
#         resources:
#           limits:
#             cpu: 100m
#             memory: 100Mi
# -----------------------





# https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/

# minikube addons enable ingress
# kubectl get pods -n ingress-nginx # check

# kubectl create deployment web --image=gcr.io/google-samples/hello-app:1.0
# kubectl expose deployment web --type=NodePort --port=8080
# minikube service web --url


# kubectl create deployment web2 --image=gcr.io/google-samples/hello-app:2.0
# kubectl expose deployment web2 --port=8080 --type=NodePort


# minikube ip
# Add the following line to the bottom of the 
# /etc/hosts file on your computer (you will need administrator access):
# 172.17.0.15 test.example.com

# kubectl apply -f ./

# http://test.example.com
# http://test.example.com/v2